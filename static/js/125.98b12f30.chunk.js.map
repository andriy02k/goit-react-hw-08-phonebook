{"version":3,"file":"static/js/125.98b12f30.chunk.js","mappings":"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","sources":["components/UserMenu/UserMenu.jsx","../node_modules/@chakra-ui/layout/src/link.tsx","components/Navigation/Navigation.jsx","store/auth/selectors.js","../node_modules/@chakra-ui/button/src/button-context.ts","../node_modules/@chakra-ui/button/src/button-icon.tsx","../node_modules/@chakra-ui/button/src/button-spinner.tsx","../node_modules/@chakra-ui/button/src/button.tsx","../node_modules/@chakra-ui/button/src/use-button-type.tsx","../node_modules/@chakra-ui/layout/src/box.tsx","../node_modules/@chakra-ui/react-use-merge-refs/src/index.ts"],"sourcesContent":["import { useSelector, useDispatch } from 'react-redux';\nimport { profileSelector } from '../../store/auth/selectors';\nimport { logoutThunk } from '../../store/auth/thunks';\nimport { Button, Box, useTheme } from '@chakra-ui/react';\n\nconst UserMenu = () => {\n    const theme = useTheme()\n\n    const user = useSelector(profileSelector);\n    const dispatch = useDispatch();\n    const handleClick = () => {\n        dispatch(logoutThunk());\n    };\n  return (\n    <div>\n        {user && (\n            <Box style={{color: theme.colors.primary, marginBottom: \"12px\"}}>\n                <p style={{marginBottom: \"12px\"}}>{user.email}</p>\n                <Button onClick={handleClick}>Logout</Button>\n            </Box>\n      )}\n    </div>\n  )\n}\n\nexport default UserMenu","import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\n\nexport interface LinkProps extends HTMLChakraProps<\"a\">, ThemingProps<\"Link\"> {\n  /**\n   *  If `true`, the link will open in new tab\n   *\n   * @default false\n   */\n  isExternal?: boolean\n}\n\n/**\n * Links are accessible elements used primarily for navigation.\n *\n * It integrates well with other routing libraries like\n * React Router, Reach Router and Next.js Link.\n *\n * @example\n *\n * ```jsx\n * <Link as={ReactRouterLink} to=\"/home\">Home</Link>\n * ```\n *\n * @see Docs https://chakra-ui.com/link\n */\nexport const Link = forwardRef<LinkProps, \"a\">(function Link(props, ref) {\n  const styles = useStyleConfig(\"Link\", props)\n  const { className, isExternal, ...rest } = omitThemingProps(props)\n\n  return (\n    <chakra.a\n      target={isExternal ? \"_blank\" : undefined}\n      rel={isExternal ? \"noopener\" : undefined}\n      ref={ref}\n      className={cx(\"chakra-link\", className)}\n      {...rest}\n      __css={styles}\n    />\n  )\n})\n\nLink.displayName = \"Link\"\n","import UserMenu from '../UserMenu/UserMenu';\nimport { Link } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport { isAuthSelector, profileSelector } from '../../store/auth/selectors';\nimport { Link as ChakraLink, Box, useTheme } from '@chakra-ui/react';\n\nconst Navigation = () => {\n  const theme = useTheme();\n\n  const user = useSelector(profileSelector);\n  const token = useSelector(isAuthSelector) ?? '';\n  return (\n    <Box style={{ color: theme.colors.primary, marginBottom: '12px' }}>\n      {token && (\n        <nav\n          style={{\n            display: 'flex',\n            justifyContent: 'center',\n            marginBottom: '8px',\n            _hover: { textDecoration: 'underline' },\n            _active: { textDecoration: 'underline' },\n          }}\n        >\n          <ChakraLink as={Link} to=\"/contacts\">\n            Contacts\n          </ChakraLink>\n        </nav>\n      )}\n      {!user && (\n        <nav\n          style={{\n            display: 'flex',\n            gap: '14px',\n            _hover: { textDecoration: 'underline' },\n            _active: { textDecoration: 'underline' },\n          }}\n        >\n          <ChakraLink as={Link} to=\"/signup\">\n            Sign Up\n          </ChakraLink>\n          <ChakraLink as={Link} to=\"/login\">\n            Login\n          </ChakraLink>\n        </nav>\n      )}\n      <UserMenu />\n    </Box>\n  );\n};\n\nexport default Navigation;\n","export const isAuthSelector = (state) => state.auth.token\nexport const profileSelector = (state) => state.auth.profile","import { createContext } from \"@chakra-ui/react-context\"\nimport { ThemingProps } from \"@chakra-ui/system\"\n\nexport interface ButtonGroupContext extends ThemingProps<\"Button\"> {\n  /**\n   * @default false\n   */\n  isDisabled?: boolean\n}\n\nexport const [ButtonGroupProvider, useButtonGroup] =\n  createContext<ButtonGroupContext>({\n    strict: false,\n    name: \"ButtonGroupContext\",\n  })\n","import { chakra, HTMLChakraProps } from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { cloneElement, isValidElement } from \"react\"\n\nexport function ButtonIcon(props: HTMLChakraProps<\"span\">) {\n  const { children, className, ...rest } = props\n\n  const _children = isValidElement(children)\n    ? cloneElement<any>(children, {\n        \"aria-hidden\": true,\n        focusable: false,\n      })\n    : children\n\n  const _className = cx(\"chakra-button__icon\", className)\n\n  return (\n    <chakra.span\n      display=\"inline-flex\"\n      alignSelf=\"center\"\n      flexShrink={0}\n      {...rest}\n      className={_className}\n    >\n      {_children}\n    </chakra.span>\n  )\n}\n\nButtonIcon.displayName = \"ButtonIcon\"\n","import { Spinner } from \"@chakra-ui/spinner\"\nimport { chakra, HTMLChakraProps, SystemStyleObject } from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { useMemo } from \"react\"\nimport { ButtonSpinnerOptions } from \"./button-types\"\n\ninterface ButtonSpinnerProps\n  extends HTMLChakraProps<\"div\">,\n    ButtonSpinnerOptions {}\n\nexport function ButtonSpinner(props: ButtonSpinnerProps) {\n  const {\n    label,\n    placement,\n    spacing = \"0.5rem\",\n    children = <Spinner color=\"currentColor\" width=\"1em\" height=\"1em\" />,\n    className,\n    __css,\n    ...rest\n  } = props\n\n  const _className = cx(\"chakra-button__spinner\", className)\n\n  const marginProp = placement === \"start\" ? \"marginEnd\" : \"marginStart\"\n\n  const spinnerStyles: SystemStyleObject = useMemo(\n    () => ({\n      display: \"flex\",\n      alignItems: \"center\",\n      position: label ? \"relative\" : \"absolute\",\n      [marginProp]: label ? spacing : 0,\n      fontSize: \"1em\",\n      lineHeight: \"normal\",\n      ...__css,\n    }),\n    [__css, label, marginProp, spacing],\n  )\n\n  return (\n    <chakra.div className={_className} {...rest} __css={spinnerStyles}>\n      {children}\n    </chakra.div>\n  )\n}\nButtonSpinner.displayName = \"ButtonSpinner\"\n","import { useMergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx, dataAttr } from \"@chakra-ui/shared-utils\"\n\nimport { useMemo } from \"react\"\nimport { useButtonGroup } from \"./button-context\"\nimport { ButtonIcon } from \"./button-icon\"\nimport { ButtonSpinner } from \"./button-spinner\"\nimport { ButtonOptions } from \"./button-types\"\nimport { useButtonType } from \"./use-button-type\"\n\nexport interface ButtonProps\n  extends HTMLChakraProps<\"button\">,\n    ButtonOptions,\n    ThemingProps<\"Button\"> {}\n\n/**\n * Button component is used to trigger an action or event, such as submitting a form, opening a Dialog, canceling an action, or performing a delete operation.\n *\n * @see Docs https://chakra-ui.com/docs/components/button\n * @see WAI-ARIA https://www.w3.org/WAI/ARIA/apg/patterns/button/\n */\nexport const Button = forwardRef<ButtonProps, \"button\">((props, ref) => {\n  const group = useButtonGroup()\n  const styles = useStyleConfig(\"Button\", { ...group, ...props })\n\n  const {\n    isDisabled = group?.isDisabled,\n    isLoading,\n    isActive,\n    children,\n    leftIcon,\n    rightIcon,\n    loadingText,\n    iconSpacing = \"0.5rem\",\n    type,\n    spinner,\n    spinnerPlacement = \"start\",\n    className,\n    as,\n    ...rest\n  } = omitThemingProps(props)\n\n  /**\n   * When button is used within ButtonGroup (i.e. flushed with sibling buttons),\n   * it is important to add a `zIndex` on focus.\n   *\n   * So let's read the component styles and then add `zIndex` to it.\n   */\n  const buttonStyles: SystemStyleObject = useMemo(() => {\n    // @ts-ignore\n    const _focus = { ...styles?.[\"_focus\"], zIndex: 1 }\n    return {\n      display: \"inline-flex\",\n      appearance: \"none\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      userSelect: \"none\",\n      position: \"relative\",\n      whiteSpace: \"nowrap\",\n      verticalAlign: \"middle\",\n      outline: \"none\",\n      ...styles,\n      ...(!!group && { _focus }),\n    }\n  }, [styles, group])\n\n  const { ref: _ref, type: defaultType } = useButtonType(as)\n\n  const contentProps = { rightIcon, leftIcon, iconSpacing, children }\n\n  return (\n    <chakra.button\n      ref={useMergeRefs(ref, _ref)}\n      as={as}\n      type={type ?? defaultType}\n      data-active={dataAttr(isActive)}\n      data-loading={dataAttr(isLoading)}\n      __css={buttonStyles}\n      className={cx(\"chakra-button\", className)}\n      {...rest}\n      disabled={isDisabled || isLoading}\n    >\n      {isLoading && spinnerPlacement === \"start\" && (\n        <ButtonSpinner\n          className=\"chakra-button__spinner--start\"\n          label={loadingText}\n          placement=\"start\"\n          spacing={iconSpacing}\n        >\n          {spinner}\n        </ButtonSpinner>\n      )}\n\n      {isLoading ? (\n        loadingText || (\n          <chakra.span opacity={0}>\n            <ButtonContent {...contentProps} />\n          </chakra.span>\n        )\n      ) : (\n        <ButtonContent {...contentProps} />\n      )}\n\n      {isLoading && spinnerPlacement === \"end\" && (\n        <ButtonSpinner\n          className=\"chakra-button__spinner--end\"\n          label={loadingText}\n          placement=\"end\"\n          spacing={iconSpacing}\n        >\n          {spinner}\n        </ButtonSpinner>\n      )}\n    </chakra.button>\n  )\n})\n\nButton.displayName = \"Button\"\n\ntype ButtonContentProps = Pick<\n  ButtonProps,\n  \"leftIcon\" | \"rightIcon\" | \"children\" | \"iconSpacing\"\n>\n\nfunction ButtonContent(props: ButtonContentProps) {\n  const { leftIcon, rightIcon, children, iconSpacing } = props\n  return (\n    <>\n      {leftIcon && <ButtonIcon marginEnd={iconSpacing}>{leftIcon}</ButtonIcon>}\n      {children}\n      {rightIcon && (\n        <ButtonIcon marginStart={iconSpacing}>{rightIcon}</ButtonIcon>\n      )}\n    </>\n  )\n}\n","import { useCallback, useState } from \"react\"\n\nexport function useButtonType(value?: React.ElementType) {\n  const [isButton, setIsButton] = useState(!value)\n  const refCallback = useCallback((node: HTMLElement | null) => {\n    if (!node) return\n    setIsButton(node.tagName === \"BUTTON\")\n  }, [])\n  const type = isButton ? \"button\" : undefined\n  return { ref: refCallback, type } as const\n}\n","import {\n  chakra,\n  forwardRef,\n  SystemStyleObject,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\n\nexport interface BoxProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * Box is the most abstract component on top of which other chakra\n * components are built. It renders a `div` element by default.\n *\n * @see Docs https://chakra-ui.com/box\n */\nexport const Box = chakra(\"div\")\n\nBox.displayName = \"Box\"\n\n/**\n * As a constraint, you can't pass size related props\n * Only `size` would be allowed\n */\ntype Omitted = \"size\" | \"boxSize\" | \"width\" | \"height\" | \"w\" | \"h\"\n\nexport interface SquareProps extends Omit<BoxProps, Omitted> {\n  /**\n   * The size (width and height) of the square\n   */\n  size?: BoxProps[\"width\"]\n  /**\n   * If `true`, the content will be centered in the square\n   *\n   * @default false\n   */\n  centerContent?: boolean\n}\n\nexport const Square = forwardRef<SquareProps, \"div\">(function Square(\n  props,\n  ref,\n) {\n  const { size, centerContent = true, ...rest } = props\n\n  const styles: SystemStyleObject = centerContent\n    ? { display: \"flex\", alignItems: \"center\", justifyContent: \"center\" }\n    : {}\n\n  return (\n    <Box\n      ref={ref}\n      boxSize={size}\n      __css={{\n        ...styles,\n        flexShrink: 0,\n        flexGrow: 0,\n      }}\n      {...rest}\n    />\n  )\n})\n\nSquare.displayName = \"Square\"\n\nexport const Circle = forwardRef<SquareProps, \"div\">(function Circle(\n  props,\n  ref,\n) {\n  const { size, ...rest } = props\n  return <Square size={size} ref={ref} borderRadius=\"9999px\" {...rest} />\n})\n\nCircle.displayName = \"Circle\"\n","import { useMemo } from \"react\"\n\nexport type ReactRef<T> = React.RefCallback<T> | React.MutableRefObject<T>\n\nexport function assignRef<T = any>(\n  ref: ReactRef<T> | null | undefined,\n  value: T,\n) {\n  if (ref == null) return\n\n  if (typeof ref === \"function\") {\n    ref(value)\n    return\n  }\n\n  try {\n    ref.current = value\n  } catch (error) {\n    throw new Error(`Cannot assign value '${value}' to ref '${ref}'`)\n  }\n}\n\nexport function mergeRefs<T>(...refs: (ReactRef<T> | null | undefined)[]) {\n  return (node: T | null) => {\n    refs.forEach((ref) => {\n      assignRef(ref, node)\n    })\n  }\n}\n\nexport function useMergeRefs<T>(...refs: (ReactRef<T> | null | undefined)[]) {\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  return useMemo(() => mergeRefs(...refs), refs)\n}\n"],"names":["theme","useTheme","user","useSelector","profileSelector","dispatch","useDispatch","_jsx","children","_jsxs","Box","style","color","colors","primary","marginBottom","email","Button","onClick","logoutThunk","Link","forwardRef","props","ref","styles","useStyleConfig","omitThemingProps","className","isExternal","rest","chakra","a","target","rel","cx","__css","displayName","_useSelector","token","isAuthSelector","display","justifyContent","_hover","textDecoration","_active","ChakraLink","as","to","gap","UserMenu","state","auth","profile","createContext","strict","name","_createContext2","useButtonGroup","ButtonGroupProvider","ButtonIcon","_children","isValidElement","cloneElement","focusable","_className","span","alignSelf","flexShrink","ButtonSpinner","label","placement","_props$spacing","spacing","_props$children","Spinner","width","height","marginProp","spinnerStyles","useMemo","alignItems","position","div","group","_omitThemingProps$isD","isDisabled","isLoading","isActive","leftIcon","rightIcon","loadingText","_omitThemingProps$ico","iconSpacing","type","spinner","_omitThemingProps$spi","spinnerPlacement","buttonStyles","_focus","zIndex","appearance","userSelect","whiteSpace","verticalAlign","outline","value","useState","_useState2","isButton","setIsButton","useCallback","node","tagName","useButtonType","_ref","defaultType","contentProps","button","useMergeRefs","dataAttr","disabled","opacity","ButtonContent","marginEnd","marginStart","Square","size","_props$centerContent","centerContent","boxSize","flexGrow","borderRadius","assignRef","current","error","Error","mergeRefs","refs","forEach"],"sourceRoot":""}